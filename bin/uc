#!/usr/bin/env ruby
lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

Signal.trap("INT") { exit 1 }

require 'optparse'
require 'uc/error'
require 'uc/version'
require 'uc/server'
require 'uc/logger'
require 'uc/lock'

logger = ::Uc::Logger.logger
options = {}
options[:rails_env] = "production"

opts_parser = OptionParser.new do |opts| 
    
    banner = [] 
    banner << "Usage: uc [options] command"
    banner << ""
    banner << "Commands: "
    banner << "   start stop restart status "
    banner << "   rolling-restart "

    opts.banner = banner.join("\n")

    opts.on("-d", "--app-dir [APP DIR]" , "Set app dir") do |d| 
      path = Pathname.new(d)
      raise ::Uc::Error, "app_dir path must be absolute" if path.relative?
      options[:app_dir] = path
    end 

    opts.on("-e", "--environment [RAILS_ENV]" , "Set rails env") do |e|
      options[:rails_env] = e 
    end 

    opts.on("-v", "--version", "Show version") do |v|
      puts ::Uc::VERSION
      exit
    end

    opts.on("--debug", "Show debug messages") do
      options[:debug] = true
      logger.level = ::Logger::DEBUG
    end

    opts.on_tail("-h", "--help", "Show this message") do 
      puts opts
      exit
    end 
end

def chdir(app_dir)
  Dir.chdir app_dir
rescue
  raise ::Uc::Error, "unable to chdir to app_dir"
end

begin
  opts_parser.parse!(ARGV)
  app_dir = options[:app_dir] || Dir.pwd
  chdir app_dir
  server = ::Uc::Server.new(app_dir, rails_env: options[:rails_env], debug: options[:debug])
  command = ARGV.shift

  case command
  when "start", "stop", "restart", "status", "print_config"
    server.send command.to_sym
  when "rr", "rolling-restart"
    server.rolling_restart
  when nil
    logger.error "No command specified"
    puts opts_parser
    abort
  else
    logger.error "No such command #{command}"
    abort
  end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument, ::Uc::Error => e
  if options[:debug]
    raise e
  else
    logger.error "#{e.message}"
    abort
  end
end
